datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generatedGraphql"
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Review {
  id           Int      @id @default(autoincrement())
  rating       Int
  text         String?
  userId       Int
  creationDate DateTime @default(now()) @db.Timestamp(6)
  editDate     DateTime @default(now()) @db.Timestamp(6)
  author       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  foodId       Int
  food         Food     @relation(fields: [foodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Location {
  UCLA
}

enum FoodCategory {
  soda
  sandwich
  pizza
  salad
}

model Food {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  reviews       Review[]
  images        String[]
  location      Location     @default(UCLA)
  type          FoodCategory
  usersWithFavs User[]       @relation("usersWithFavs")
  usersWantTry  User[]       @relation("usersWantTry")
}

model User {
  id            Int      @id @default(autoincrement())
  firebaseId    String   @unique
  name          String?  @db.VarChar(255)
  email         String   @unique @db.VarChar(255) // May not need it, firebase might handle
  reviews       Review[]
  profile       Profile?
  favoritesList Food[]   @relation("usersWithFavs")
  toTryList     Food[]   @relation("usersWantTry")
}
